import cv2
import torch

# Load the model
model = torch.hub.load('ultralytics/yolov5', 'custom', path=r'C:\Users\weili\PycharmProjects\CTscan\yolov5\runs\train\exp8\weights\best.pt', force_reload=True)


# Define a dictionary to map items to ecosystems
ecosystem_mapping = {
    "Jumper Wire": "IoT",
    "Resistor": "IoT",
    "Transistor": "IoT",
    "Ultrasonic Sensor": "IoT",
    "Arduino Uno": "Arduino Ecosystem",
    "Robot": "ROS Ecosystem"
}

# Initialize webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Perform detection
    results = model(frame)
    threshold = 0.5  # Adjust the threshold to filter predictions with low confidence
    results = results.xyxy[0]  # Get detection results
    results = results[results[:, 4] > threshold]  # Apply the confidence threshold

    for *box, conf, cls in results:
        label = results.names[int(cls)]
        ecosystem = ecosystem_mapping.get(label, "Unknown")
        cv2.rectangle(frame, (int(box[0]), int(box[1])), (int(box[2]), int(box[3])), (0, 255, 0), 2)
        cv2.putText(frame, f"{label} ({ecosystem})", (int(box[0]), int(box[1]) - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Display the frame
    cv2.imshow('Detection', frame)

    # Press 'q' to quit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
